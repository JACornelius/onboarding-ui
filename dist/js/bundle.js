(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _timelineEs = require("timeline.es6.js");

window.onload = function () {
	var timelineButtonObj = document.getElementById("timelineButton");
	if (timelineButtonObj != null) {
		timelineButton.onclick = function () {
			return (0, _timelineEs.getTimeline)();
		};
	}
	(0, _timelineEs.getTimeline)();
};

},{"timeline.es6.js":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var getTimeline = exports.getTimeline = function getTimeline() {
	var xhttp = new XMLHttpRequest();
	var URL = "http://localhost:8080/api/1.0/twitter/timeline";
	xhttp.onreadystatechange = function () {
		if (xhttp.readyState == XMLHttpRequest.DONE && xhttp.status == 200) {
			renderTimeline(JSON.parse(xhttp.responseText));
		} else if (xhttp.readyState != XMLHttpRequest.DONE) {
			document.getElementById('timelinePlaceholder').innerHTML = "  ";
		} else {
			document.getElementById('timelinePlaceholder').innerHTML = "There was a problem on the server side, please try again later.";
		}
	};
	xhttp.open("GET", URL, true);
	xhttp.setRequestHeader("Content-type", "application/json");
	xhttp.send();
};

var renderTimeline = function renderTimeline(rawTimelineData) {
	var timelineElem = document.getElementById('timelinePlaceholder');
	console.log(rawTimelineData);
	//timelineElem.innerHTML = rawTimelineData;
	var monthNames = ["Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];
	for (var i in rawTimelineData) {
		var tweetObj = rawTimelineData[i];
		var wholeRow = document.createElement('div');
		wholeRow.className = "tweet";
		var leftColumn = document.createElement('div');
		leftColumn.className = "leftColumn";
		var rightColumn = document.createElement('div');
		rightColumn.className = "rightColumn";
		var dateBlock = document.createElement('div');
		dateBlock.className = "dateBlock";
		var tweetLink = document.createElement('div');
		var userName = document.createElement('div');
		userName.className = "userName";
		var twitterHandle = document.createElement('div');
		twitterHandle.className = "twitterHandle";
		if (i % 2 == 1) {
			wholeRow.style.backgroundColor = "#e8f5fd";
		} else {
			wholeRow.style.backgroundColor = "#e9e9e9";
		}

		var img = document.createElement('img');
		img.className = "image";
		img.setAttribute('src', tweetObj.profileImageUrl);
		var aTag = document.createElement('a');
		aTag.setAttribute("target", "_blank");
		aTag.setAttribute('href', "https://twitter.com/" + tweetObj.twitterHandle + "/status/" + tweetObj.statusId);
		aTag.innerHTML = tweetObj.message;
		leftColumn.append(img);
		userName.append(tweetObj.userName);
		twitterHandle.append(tweetObj.twitterHandle);
		leftColumn.append(userName);
		leftColumn.append(twitterHandle);

		var date = new Date(tweetObj.createdAt);
		dateBlock.appendChild(document.createTextNode(monthNames[date.getMonth()] + " " + date.getDate()));
		tweetLink.append(aTag);
		rightColumn.append(dateBlock);
		rightColumn.append(tweetLink);
		wholeRow.append(leftColumn);
		wholeRow.append(rightColumn);
		timelineElem.appendChild(wholeRow);
	}
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
